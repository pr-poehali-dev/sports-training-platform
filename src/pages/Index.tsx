import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { Textarea } from '@/components/ui/textarea';
import { Sheet, SheetContent, SheetTrigger, SheetHeader, SheetTitle } from '@/components/ui/sheet';
import Icon from '@/components/ui/icon';

interface User {
  name: string;
  email: string;
  avatar: string;
  streak: number;
  calories: number;
  workouts: number;
  level: number;
  isPremium: boolean;
}

interface WorkoutPlan {
  name: string;
  exercises: string[];
  duration: string;
  calories: number;
  difficulty: 'easy' | 'medium' | 'hard';
}

interface ChatMessage {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

const Index = () => {
  const [user, setUser] = useState<User>({ 
    name: '–ê–Ω–Ω–∞ –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è', 
    email: 'anna@fitness.pro',
    avatar: '/api/placeholder/150/150',
    streak: 12, 
    calories: 0, 
    workouts: 34,
    level: 7,
    isPremium: false
  });
  
  const [goal, setGoal] = useState('mass');
  const [frequency, setFrequency] = useState('3');
  const [mascotMood, setMascotMood] = useState('happy');
  const [dailyCalories, setDailyCalories] = useState({ consumed: 1850, target: 2200 });
  const [activeTab, setActiveTab] = useState('workout');
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  
  // –ò–ò-—á–∞—Ç
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      text: '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ –ó–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –ø–∏—Ç–∞–Ω–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏!',
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [newMessage, setNewMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  // –ú–∞—Å–∫–æ—Ç —Ä–µ–∞–∫—Ü–∏–∏
  const mascots = {
    happy: 'ü¶Ö',
    excited: 'üöÄ', 
    sleeping: 'üò¥',
    angry: 'üò§',
    love: 'üòç'
  };

  // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  const workoutPlans: Record<string, WorkoutPlan> = {
    mass: {
      name: '–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
      exercises: ['–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π 4√ó8-10', '–ñ–∏–º –ª–µ–∂–∞ 4√ó6-8', '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ 3√ó5-6', '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è 3√ó8-12', '–ñ–∏–º —Å—Ç–æ—è 3√ó8-10'],
      duration: '75-90 –º–∏–Ω',
      calories: 450,
      difficulty: 'hard'
    },
    loss: {
      name: '–ñ–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ HIIT',
      exercises: ['–ë–µ—Ä–ø–∏ 4√ó15', '–ì–æ—Ä–Ω—ã–π –∞–ª—å–ø–∏–Ω–∏—Å—Ç 4√ó30—Å–µ–∫', '–ü—Ä—ã–∂–∫–∏ —á–µ—Ä–µ–∑ —Å–∫–∞–∫–∞–ª–∫—É 5√ó60—Å–µ–∫', '–ü–ª–∞–Ω–∫–∞ 3√ó60—Å–µ–∫', '–°–ø—Ä–∏–Ω—Ç—ã 6√ó20—Å–µ–∫'],
      duration: '45-50 –º–∏–Ω',
      calories: 580,
      difficulty: 'medium'
    },
    cardio: {
      name: '–ö–∞—Ä–¥–∏–æ-–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
      exercises: ['–õ–µ–≥–∫–∏–π –±–µ–≥ 25 –º–∏–Ω', '–í–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä 20 –º–∏–Ω', '–≠–ª–ª–∏–ø—Å 15 –º–∏–Ω', '–ü–ª–∞–≤–∞–Ω–∏–µ 10 –º–∏–Ω', '–†–∞—Å—Ç—è–∂–∫–∞ 10 –º–∏–Ω'],
      duration: '80 –º–∏–Ω',
      calories: 520,
      difficulty: 'easy'
    },
    strength: {
      name: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏–ª–∞',
      exercises: ['–¢–æ–ª—á–æ–∫ –≥–∏—Ä–∏ 4√ó12', '–§–µ—Ä–º–µ—Ä—Å–∫–∞—è –ø–æ—Ö–æ–¥–∫–∞ 3√ó50–º', '–ü–æ–¥—ä–µ–º –ø–æ –∫–∞–Ω–∞—Ç—É 3√ó5', '–ú–∞—Ö–∏ –≥–∏—Ä–µ–π 4√ó20', '–¢—É—Ä–µ—Ü–∫–∏–π –ø–æ–¥—ä–µ–º 3√ó5'],
      duration: '60-70 –º–∏–Ω',
      calories: 420,
      difficulty: 'hard'
    }
  };

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
  const leaderboard = [
    { name: '–ú–∞–∫—Å–∏–º –ñ–µ–ª–µ–∑–æ', streak: 45, workouts: 128, level: 15, avatar: 'üí™' },
    { name: '–ï–ª–µ–Ω–∞ –ö–∞—Ä–¥–∏–æ', streak: 38, workouts: 95, level: 12, avatar: 'üèÉ‚Äç‚ôÄÔ∏è' },
    { name: '–î–º–∏—Ç—Ä–∏–π –°–∏–ª–∞—á', streak: 29, workouts: 87, level: 11, avatar: 'üèãÔ∏è‚Äç‚ôÇÔ∏è' },
    { name: user.name, streak: user.streak, workouts: user.workouts, level: user.level, avatar: 'ü¶Ö' },
    { name: '–°–æ—Ñ–∏—è –ô–æ–≥–∞', streak: 22, workouts: 76, level: 9, avatar: 'üßò‚Äç‚ôÄÔ∏è' },
    { name: '–ê–Ω–¥—Ä–µ–π –ë–µ–≥', streak: 18, workouts: 65, level: 8, avatar: 'üèÉ‚Äç‚ôÇÔ∏è' }
  ].sort((a, b) => b.streak - a.streak);

  // –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
  const checkInWorkout = () => {
    setUser(prev => ({ 
      ...prev, 
      streak: prev.streak + 1, 
      workouts: prev.workouts + 1,
      level: Math.floor((prev.workouts + 1) / 5) + 1
    }));
    setMascotMood('excited');
    setTimeout(() => setMascotMood('love'), 2000);
    setTimeout(() => setMascotMood('happy'), 5000);
  };

  // –ò–ò-–æ—Ç–≤–µ—Ç—ã
  const aiResponses = [
    '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É—é 3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é —Å –¥–Ω–µ–º –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É –Ω–∏–º–∏. –≠—Ç–æ –¥–∞—Å—Ç –º—ã—à—Ü–∞–º –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.',
    '–ü–∏—Ç–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 70% —É—Å–ø–µ—Ö–∞! –°—Ç–∞—Ä–∞–π—Å—è –µ—Å—Ç—å –±–µ–ª–æ–∫ (1.6-2–≥ –Ω–∞ –∫–≥ –≤–µ—Å–∞), —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –ø–æ–ª–µ–∑–Ω—ã–µ –∂–∏—Ä—ã.',
    '–ü–æ–º–Ω–∏: –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –≤—Å–µ–≥–¥–∞ –ª–∏–Ω–µ–π–Ω—ã–π. Plateau - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å.',
    '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. 7-9 —á–∞—Å–æ–≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞ –ø–æ–º–æ–≥—É—Ç –¥–æ—Å—Ç–∏—á—å –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.',
    '–ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏! –£ –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π –ø—É—Ç—å. –ì–ª–∞–≤–Ω–æ–µ - –±—ã—Ç—å –ª—É—á—à–µ —Å–µ–±—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ üí™',
    '–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è - –∫–ª—é—á –∫ —Ö–æ—Ä–æ—à–µ–º—É —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é. –í—ã–ø–∏–≤–∞–π 30-35 –º–ª –≤–æ–¥—ã –Ω–∞ –∫–∞–∂–¥—ã–π –∫–≥ –≤–µ—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.',
    '–†–∞–∑–º–∏–Ω–∫–∞ –∏ –∑–∞–º–∏–Ω–∫–∞ - –Ω–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ! 10-15 –º–∏–Ω—É—Ç –º–æ–≥—É—Ç —Å–ø–∞—Å—Ç–∏ –æ—Ç —Ç—Ä–∞–≤–º –∏ —É—Å–∫–æ—Ä–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.'
  ];

  const sendMessage = () => {
    if (!newMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      text: newMessage,
      isUser: true,
      timestamp: new Date()
    };

    setChatMessages(prev => [...prev, userMessage]);
    setNewMessage('');
    setIsTyping(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
    setTimeout(() => {
      const aiResponse: ChatMessage = {
        id: (Date.now() + 1).toString(),
        text: aiResponses[Math.floor(Math.random() * aiResponses.length)],
        isUser: false,
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1500 + Math.random() * 1000);
  };

  const calorieProgress = (dailyCalories.consumed / dailyCalories.target) * 100;
  const levelProgress = ((user.workouts % 5) / 5) * 100;

  // –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
  const mobileNavItems = [
    { id: 'workout', icon: 'Dumbbell', label: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' },
    { id: 'calories', icon: 'Calculator', label: '–ö–∞–ª–æ—Ä–∏–∏' },
    { id: 'help', icon: 'MessageCircle', label: '–ü–æ–º–æ—â—å' },
    { id: 'leaderboard', icon: 'Trophy', label: '–õ–∏–¥–µ—Ä—ã' },
    { id: 'profile', icon: 'User', label: '–ü—Ä–æ—Ñ–∏–ª—å' }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-purple-50/20">
      {/* –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–µ–¥–µ—Ä */}
      <header className="bg-white/90 backdrop-blur-xl border-b border-border/50 sticky top-0 z-50 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-gradient-to-br from-energetic-orange to-achievement-gold rounded-2xl flex items-center justify-center text-white font-bold text-xl shadow-lg">
                F
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 bg-clip-text text-transparent">
                  FitTracker Pro
                </h1>
                {user.isPremium && (
                  <Badge className="text-xs bg-gradient-to-r from-fitness-purple to-athletic-blue text-white">
                    Premium
                  </Badge>
                )}
              </div>
            </div>

            {/* –î–µ—Å–∫—Ç–æ–ø –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
            <div className="hidden md:flex items-center gap-6">
              <div className="streak-badge animate-pulse">
                <Icon name="Flame" size={16} />
                <span>{user.streak} –¥–Ω–µ–π</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="text-3xl animate-bounce">{mascots[mascotMood as keyof typeof mascots]}</div>
                <div className="text-sm">
                  <div className="font-medium">–£—Ä–æ–≤–µ–Ω—å {user.level}</div>
                  <Progress value={levelProgress} className="w-16 h-2" />
                </div>
              </div>
              <Avatar className="w-10 h-10 border-2 border-energetic-orange">
                <AvatarImage src={user.avatar} />
                <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
              </Avatar>
            </div>

            {/* –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é */}
            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
              <SheetTrigger asChild className="md:hidden">
                <Button variant="ghost" size="sm">
                  <Icon name="Menu" size={24} />
                </Button>
              </SheetTrigger>
              <SheetContent side="right" className="w-80">
                <SheetHeader>
                  <SheetTitle className="flex items-center gap-3">
                    <Avatar className="w-12 h-12">
                      <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <div>
                      <div className="font-semibold">{user.name}</div>
                      <div className="text-sm text-muted-foreground">–£—Ä–æ–≤–µ–Ω—å {user.level}</div>
                    </div>
                  </SheetTitle>
                </SheetHeader>
                <div className="mt-6 space-y-4">
                  <div className="flex items-center justify-between p-4 bg-muted/50 rounded-2xl">
                    <span>–°–µ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</span>
                    <div className="streak-badge">
                      <Icon name="Flame" size={16} />
                      {user.streak}
                    </div>
                  </div>
                  <div className="flex items-center justify-between p-4 bg-muted/50 rounded-2xl">
                    <span>–ú–∞—Å–∫–æ—Ç</span>
                    <div className="text-2xl">{mascots[mascotMood as keyof typeof mascots]}</div>
                  </div>
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 py-6 pb-24 md:pb-6">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          {/* –î–µ—Å–∫—Ç–æ–ø —Ç–∞–±—ã */}
          <TabsList className="hidden md:grid w-full grid-cols-6 bg-white/70 backdrop-blur-sm">
            <TabsTrigger value="workout" className="data-[state=active]:bg-energetic-orange data-[state=active]:text-white">
              <Icon name="Dumbbell" size={16} className="mr-2" />
              –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            </TabsTrigger>
            <TabsTrigger value="calories" className="data-[state=active]:bg-athletic-blue data-[state=active]:text-white">
              <Icon name="Calculator" size={16} className="mr-2" />
              –ü–∏—Ç–∞–Ω–∏–µ
            </TabsTrigger>
            <TabsTrigger value="help" className="data-[state=active]:bg-fitness-purple data-[state=active]:text-white">
              <Icon name="MessageCircle" size={16} className="mr-2" />
              –ò–ò –ü–æ–º–æ—â—å
            </TabsTrigger>
            <TabsTrigger value="leaderboard" className="data-[state=active]:bg-achievement-gold data-[state=active]:text-white">
              <Icon name="Trophy" size={16} className="mr-2" />
              –õ–∏–¥–µ—Ä—ã
            </TabsTrigger>
            <TabsTrigger value="profile" className="data-[state=active]:bg-gray-800 data-[state=active]:text-white">
              <Icon name="User" size={16} className="mr-2" />
              –ü—Ä–æ—Ñ–∏–ª—å
            </TabsTrigger>
            <TabsTrigger value="support" className="data-[state=active]:bg-red-500 data-[state=active]:text-white">
              <Icon name="Heart" size={16} className="mr-2" />
              –î–æ–Ω–∞—Ç
            </TabsTrigger>
          </TabsList>

          {/* –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - —É–ª—É—á—à–µ–Ω–Ω—ã–µ */}
          <TabsContent value="workout" className="space-y-6">
            <div className="grid gap-6 lg:grid-cols-3 md:grid-cols-2">
              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã */}
              <Card className="workout-card lg:col-span-1">
                <div className="space-y-4">
                  <h2 className="text-xl font-semibold flex items-center gap-2">
                    <Icon name="Settings" size={24} className="text-energetic-orange" />
                    –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
                  </h2>
                  
                  <div className="space-y-4">
                    <div className="space-y-3">
                      <Label className="text-sm font-medium">–¶–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</Label>
                      <div className="grid grid-cols-2 gap-2">
                        {[
                          { value: 'mass', label: '–ú–∞—Å—Å–∞', icon: 'TrendingUp', color: 'bg-blue-500' },
                          { value: 'loss', label: '–ü–æ—Ö—É–¥–µ–Ω–∏–µ', icon: 'TrendingDown', color: 'bg-red-500' },
                          { value: 'cardio', label: '–ö–∞—Ä–¥–∏–æ', icon: 'Heart', color: 'bg-pink-500' },
                          { value: 'strength', label: '–°–∏–ª–∞', icon: 'Zap', color: 'bg-purple-500' }
                        ].map(option => (
                          <Button
                            key={option.value}
                            variant={goal === option.value ? 'default' : 'outline'}
                            size="sm"
                            onClick={() => setGoal(option.value)}
                            className={`flex items-center gap-2 h-12 ${
                              goal === option.value ? option.color : ''
                            }`}
                          >
                            <Icon name={option.icon as any} size={16} />
                            <span className="text-xs">{option.label}</span>
                          </Button>
                        ))}
                      </div>
                    </div>

                    <div className="space-y-3">
                      <Label className="text-sm font-medium">–ß–∞—Å—Ç–æ—Ç–∞ (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)</Label>
                      <div className="grid grid-cols-4 gap-2">
                        {['2', '3', '4', '5'].map(freq => (
                          <Button
                            key={freq}
                            variant={frequency === freq ? 'default' : 'outline'}
                            size="sm"
                            onClick={() => setFrequency(freq)}
                            className={`h-10 ${frequency === freq ? 'bg-athletic-blue' : ''}`}
                          >
                            {freq}
                          </Button>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </Card>

              {/* –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ */}
              <Card className="workout-card lg:col-span-2">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h2 className="text-xl font-semibold flex items-center gap-2">
                      <Icon name="Target" size={24} className="text-athletic-blue" />
                      {workoutPlans[goal].name}
                    </h2>
                    <Badge className={`
                      ${workoutPlans[goal].difficulty === 'easy' ? 'bg-green-100 text-green-800' : 
                        workoutPlans[goal].difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' : 
                        'bg-red-100 text-red-800'}
                    `}>
                      {workoutPlans[goal].difficulty === 'easy' ? '–õ–µ–≥–∫–æ' : 
                       workoutPlans[goal].difficulty === 'medium' ? '–°—Ä–µ–¥–Ω–µ' : '–°–ª–æ–∂–Ω–æ'}
                    </Badge>
                  </div>
                  
                  <div className="grid md:grid-cols-3 gap-4 mb-4">
                    <div className="flex items-center gap-2 text-sm text-muted-foreground bg-muted/30 rounded-xl p-3">
                      <Icon name="Clock" size={16} />
                      <span>{workoutPlans[goal].duration}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-muted-foreground bg-muted/30 rounded-xl p-3">
                      <Icon name="Flame" size={16} />
                      <span>~{workoutPlans[goal].calories} –∫–∫–∞–ª</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-muted-foreground bg-muted/30 rounded-xl p-3">
                      <Icon name="BarChart3" size={16} />
                      <span>{workoutPlans[goal].exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</span>
                    </div>
                  </div>
                  
                  <div className="grid gap-2 mb-4">
                    {workoutPlans[goal].exercises.map((exercise, idx) => (
                      <div key={idx} className="flex items-center gap-3 p-3 bg-white/50 rounded-xl border border-border/30">
                        <div className="w-8 h-8 bg-energetic-orange/20 text-energetic-orange rounded-full flex items-center justify-center text-sm font-bold">
                          {idx + 1}
                        </div>
                        <span className="text-sm font-medium">{exercise}</span>
                      </div>
                    ))}
                  </div>
                  
                  <Button 
                    onClick={checkInWorkout} 
                    className="w-full bg-gradient-to-r from-energetic-orange to-achievement-gold hover:from-energetic-orange/90 hover:to-achievement-gold/90 text-white font-semibold py-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                    size="lg"
                  >
                    <Icon name="Check" size={20} className="mr-2" />
                    –û—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
                    <div className="ml-2 animate-pulse">üî•</div>
                  </Button>
                </div>
              </Card>
            </div>

            {/* –ù–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
            <Card className="workout-card">
              <div className="space-y-4">
                <h3 className="text-lg font-semibold flex items-center gap-2">
                  <Icon name="Calendar" size={20} />
                  –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏
                </h3>
                <div className="grid grid-cols-7 gap-2">
                  {Array.from({ length: 7 }, (_, i) => {
                    const isCompleted = i < (user.streak % 7);
                    const isToday = i === 6;
                    return (
                      <div key={i} className="text-center space-y-2">
                        <div className="text-xs text-muted-foreground font-medium">
                          {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][i]}
                        </div>
                        <div className={`w-12 h-12 rounded-2xl flex items-center justify-center text-sm font-bold transition-all duration-300 ${
                          isCompleted 
                            ? 'bg-gradient-to-br from-energetic-orange to-achievement-gold text-white shadow-lg transform scale-110' 
                            : isToday
                            ? 'bg-muted border-2 border-energetic-orange border-dashed animate-pulse'
                            : 'bg-muted/50'
                        }`}>
                          {isCompleted ? '‚úì' : isToday ? 'üìÖ' : ''}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </Card>
          </TabsContent>

          {/* –ò–ò –ü–æ–º–æ—â—å - –Ω–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ */}
          <TabsContent value="help" className="space-y-6">
            <Card className="workout-card h-[600px] flex flex-col">
              <div className="space-y-4 flex-1 flex flex-col">
                <h2 className="text-xl font-semibold flex items-center gap-2">
                  <div className="w-8 h-8 bg-gradient-to-br from-fitness-purple to-athletic-blue rounded-full flex items-center justify-center">
                    <Icon name="Bot" size={16} className="text-white" />
                  </div>
                  –ò–ò –§–∏—Ç–Ω–µ—Å-–ü–æ–º–æ—â–Ω–∏–∫
                  <Badge className="bg-gradient-to-r from-fitness-purple to-athletic-blue text-white">
                    Beta
                  </Badge>
                </h2>
                
                <div className="flex-1 bg-gradient-to-b from-gray-50 to-gray-100 rounded-xl p-4 overflow-y-auto space-y-4 max-h-96">
                  {chatMessages.map(message => (
                    <div key={message.id} className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}>
                      <div className={message.isUser ? 'user-message' : 'ai-chat-message max-w-[80%]'}>
                        {!message.isUser && (
                          <div className="flex items-center gap-2 mb-2">
                            <div className="w-6 h-6 bg-gradient-to-br from-fitness-purple to-athletic-blue rounded-full flex items-center justify-center">
                              <Icon name="Bot" size={12} className="text-white" />
                            </div>
                            <span className="text-xs text-muted-foreground font-medium">–§–∏—Ç–Ω–µ—Å-–ò–ò</span>
                          </div>
                        )}
                        <p className="text-sm">{message.text}</p>
                        <div className={`text-xs ${message.isUser ? 'text-white/70' : 'text-muted-foreground'} mt-1`}>
                          {message.timestamp.toLocaleTimeString('ru-RU', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {isTyping && (
                    <div className="flex justify-start">
                      <div className="ai-chat-message">
                        <div className="flex items-center gap-2 mb-2">
                          <div className="w-6 h-6 bg-gradient-to-br from-fitness-purple to-athletic-blue rounded-full flex items-center justify-center animate-pulse">
                            <Icon name="Bot" size={12} className="text-white" />
                          </div>
                          <span className="text-xs text-muted-foreground font-medium">–ü–µ—á–∞—Ç–∞–µ—Ç...</span>
                        </div>
                        <div className="flex gap-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
                
                <div className="space-y-2">
                  <div className="flex gap-2 flex-wrap">
                    {[
                      '–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?',
                      '–ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã',
                      '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –¥–æ–º–∞',
                      '–ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —Ç—Ä–∞–≤–º?'
                    ].map(suggestion => (
                      <Button
                        key={suggestion}
                        variant="outline"
                        size="sm"
                        onClick={() => setNewMessage(suggestion)}
                        className="text-xs h-8"
                      >
                        {suggestion}
                      </Button>
                    ))}
                  </div>
                  
                  <div className="flex gap-2">
                    <Textarea
                      placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –ø–∏—Ç–∞–Ω–∏–∏, –∑–¥–æ—Ä–æ–≤—å–µ..."
                      value={newMessage}
                      onChange={(e) => setNewMessage(e.target.value)}
                      className="resize-none min-h-12 max-h-24"
                      onKeyDown={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey) {
                          e.preventDefault();
                          sendMessage();
                        }
                      }}
                    />
                    <Button
                      onClick={sendMessage}
                      disabled={!newMessage.trim() || isTyping}
                      className="bg-gradient-to-r from-fitness-purple to-athletic-blue hover:from-fitness-purple/90 hover:to-athletic-blue/90 min-w-12 h-12"
                    >
                      <Icon name="Send" size={16} />
                    </Button>
                  </div>
                </div>
              </div>
            </Card>
          </TabsContent>

          {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏ */}
          <TabsContent value="calories" className="space-y-6">
            <div className="grid gap-6 lg:grid-cols-2">
              <Card className="workout-card">
                <div className="space-y-4">
                  <h2 className="text-xl font-semibold flex items-center gap-2">
                    <Icon name="Target" size={24} className="text-achievement-gold" />
                    –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π
                  </h2>
                  
                  <div className="space-y-6">
                    <div className="text-center space-y-2">
                      <div className="text-4xl font-bold bg-gradient-to-r from-energetic-orange to-achievement-gold bg-clip-text text-transparent">
                        {dailyCalories.consumed}
                      </div>
                      <div className="text-muted-foreground">
                        –∏–∑ {dailyCalories.target} –∫–∫–∞–ª
                      </div>
                    </div>
                    
                    <Progress value={calorieProgress} className="h-4" />
                    
                    <div className="grid grid-cols-3 gap-4">
                      {[
                        { label: '–ë–µ–ª–∫–∏', value: '125–≥', color: 'text-blue-500' },
                        { label: '–ñ–∏—Ä—ã', value: '68–≥', color: 'text-yellow-500' },
                        { label: '–£–≥–ª–µ–≤–æ–¥—ã', value: '210–≥', color: 'text-green-500' }
                      ].map(macro => (
                        <div key={macro.label} className="text-center p-3 bg-white/50 rounded-xl">
                          <div className="text-xs text-muted-foreground">{macro.label}</div>
                          <div className={`font-bold ${macro.color}`}>{macro.value}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </Card>

              <Card className="workout-card">
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏</h3>
                  <div className="space-y-3">
                    <Input placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞" />
                    <Input placeholder="–ö–∞–ª–æ—Ä–∏–∏" type="number" />
                    <Button className="w-full bg-athletic-blue hover:bg-athletic-blue/90">
                      <Icon name="Plus" size={16} />
                      –î–æ–±–∞–≤–∏—Ç—å
                    </Button>
                  </div>
                </div>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="leaderboard" className="space-y-6">
            <Card className="workout-card">
              <div className="space-y-4">
                <h2 className="text-xl font-semibold flex items-center gap-2">
                  <Icon name="Trophy" size={24} className="text-achievement-gold" />
                  –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
                </h2>
                
                <div className="space-y-3">
                  {leaderboard.map((leader, idx) => (
                    <div key={leader.name} className={`flex items-center justify-between p-4 rounded-xl ${
                      leader.name === user.name ? 'bg-energetic-orange/10 border border-energetic-orange/20' : 'bg-muted/50'
                    }`}>
                      <div className="flex items-center gap-3">
                        <div className={`w-10 h-10 rounded-full flex items-center justify-center font-bold text-white ${
                          idx === 0 ? 'bg-achievement-gold' : 
                          idx === 1 ? 'bg-gray-400' : 
                          idx === 2 ? 'bg-orange-600' : 'bg-athletic-blue'
                        }`}>
                          {idx < 3 ? ['ü•á', 'ü•à', 'ü•â'][idx] : idx + 1}
                        </div>
                        <div>
                          <div className="font-medium">{leader.name}</div>
                          <div className="text-sm text-muted-foreground">
                            {leader.workouts} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å {leader.level}
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <span className="text-xl">{leader.avatar}</span>
                        <div className="streak-badge">
                          <Icon name="Flame" size={14} />
                          {leader.streak}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </Card>
          </TabsContent>

          <TabsContent value="profile" className="space-y-6">
            <Card className="workout-card">
              <div className="space-y-4">
                <div className="flex items-center gap-4">
                  <Avatar className="w-16 h-16 border-4 border-energetic-orange">
                    <AvatarFallback className="text-xl font-bold bg-gradient-to-br from-energetic-orange to-achievement-gold text-white">
                      {user.name.charAt(0)}
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <h2 className="text-xl font-bold">{user.name}</h2>
                    <p className="text-muted-foreground">{user.email}</p>
                    <Badge className="bg-athletic-blue mt-1">–£—Ä–æ–≤–µ–Ω—å {user.level}</Badge>
                  </div>
                </div>
                
                <div className="grid md:grid-cols-3 gap-4">
                  <div className="text-center p-4 bg-muted/50 rounded-xl">
                    <div className="text-2xl font-bold text-energetic-orange">{user.streak}</div>
                    <div className="text-sm text-muted-foreground">–î–Ω–µ–π –ø–æ–¥—Ä—è–¥</div>
                  </div>
                  <div className="text-center p-4 bg-muted/50 rounded-xl">
                    <div className="text-2xl font-bold text-athletic-blue">{user.workouts}</div>
                    <div className="text-sm text-muted-foreground">–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</div>
                  </div>
                  <div className="text-center p-4 bg-muted/50 rounded-xl">
                    <div className="text-2xl font-bold text-achievement-gold">{user.level}</div>
                    <div className="text-sm text-muted-foreground">–£—Ä–æ–≤–µ–Ω—å</div>
                  </div>
                </div>
              </div>
            </Card>
          </TabsContent>

          <TabsContent value="support" className="space-y-6">
            <Card className="workout-card">
              <div className="space-y-6">
                <div className="text-center space-y-3">
                  <div className="w-16 h-16 bg-gradient-to-br from-red-500 to-pink-600 rounded-full flex items-center justify-center mx-auto">
                    <Icon name="Heart" size={32} className="text-white" />
                  </div>
                  <h2 className="text-2xl font-bold">–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å FitTracker Pro</h2>
                  <p className="text-muted-foreground">
                    –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤. –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!
                  </p>
                </div>
                
                <div className="grid gap-4 md:grid-cols-3">
                  {[
                    { amount: '150‚ÇΩ', desc: '–ö–æ—Ñ–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É' },
                    { amount: '500‚ÇΩ', desc: '–û–±–µ–¥ –∫–æ–º–∞–Ω–¥—ã' },
                    { amount: '1500‚ÇΩ', desc: '–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏' }
                  ].map(option => (
                    <Button key={option.amount} variant="outline" className="h-auto p-6 flex-col gap-2">
                      <div className="text-2xl font-bold text-energetic-orange">{option.amount}</div>
                      <div className="text-sm text-muted-foreground text-center">{option.desc}</div>
                    </Button>
                  ))}
                </div>
                
                <div className="bg-muted/30 rounded-xl p-4 space-y-3">
                  <h3 className="font-semibold">–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤:</h3>
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <div className="font-medium">–°–±–µ—Ä–±–∞–Ω–∫:</div>
                      <div className="text-sm text-muted-foreground">2202 2012 3456 7890</div>
                    </div>
                    <div className="space-y-2">
                      <div className="font-medium">–ÆMoney:</div>
                      <div className="text-sm text-muted-foreground">410012345678901</div>
                    </div>
                  </div>
                </div>
                
                <div className="text-center text-sm text-muted-foreground">
                  <Icon name="Shield" size={16} className="inline mr-1" />
                  –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
                </div>
              </div>
            </Card>
          </TabsContent>
        </Tabs>
      </main>

      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <nav className="mobile-nav md:hidden">
        <div className="grid grid-cols-5 gap-2">
          {mobileNavItems.map(item => (
            <Button
              key={item.id}
              variant={activeTab === item.id ? 'default' : 'ghost'}
              size="sm"
              onClick={() => setActiveTab(item.id)}
              className={`flex-col h-auto py-2 px-1 ${
                activeTab === item.id 
                  ? 'bg-energetic-orange text-white' 
                  : 'text-muted-foreground'
              }`}
            >
              <Icon name={item.icon as any} size={18} />
              <span className="text-xs mt-1">{item.label}</span>
            </Button>
          ))}
        </div>
      </nav>
    </div>
  );
};

export default Index;